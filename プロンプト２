Pythonコード作成依頼プロンプト (Excel全シートPDF化)
依頼日: 本日 依頼者: T.K

1. 作成したいPythonスクリプトの概要
目的・背景:
設計書として作成されたExcelファイルの全シートの内容を、1つのPDFファイルにまとめて出力したい。これにより、設計書の共有やレビュー、印刷が容易になることを期待している。
主な機能:
指定されたExcelファイルを読み込む。
Excelファイル内の全てのシートを取得する。
各シートの内容を、Excelファイル内のシート順にPDFのページとして追加する。
最終的に1つのPDFファイルとして保存する。

2. 入力 (Excelファイルの詳細)
入力Excelファイル:
ファイルパスの指定方法: [ファイル選択形式などで、ユーザーが簡単に選べる]
ファイル形式: .xlsx (または .xls も対応可)
対象シート: Excelファイルに含まれる全てのシート。
シートの順序: Excelファイルに表示されているシートの順序でPDFページを構成する。
各シートのデータ範囲:
[適切な範囲を自動検出]
書式・レイアウトの再現度:
[重要: 「Excelで表示される見た目に極力近い形でPDF化したい」]
入力Excelファイルのサンプル構造 (可能であれば):
[設計書によくあるシート構成の例を簡単に示してください。例: 「表紙シート」「デザインシート」「仕様シート」「画面レイアウトシート（画像や図形を含む可能性あり）」など。]

3. 期待する処理フロー
指定された入力Excelファイルを開く。
Excelファイル内の全シートを、ファイル内の順序で取得する。
各シートについて、以下の処理を行う:
指定されたデータ範囲（または自動検出された範囲）の内容を取得する。
取得した内容をPDFの新しいページとして描画する。
[シートの内容が1ページに収まらない場合「複数ページに分割する」]
全てのシートの処理が完了したら、生成されたページを1つのPDFファイルとして保存する。
4. 出力
出力形式: PDFファイル
出力ファイル名/パス:
[例: 入力ファイルと同じディレクトリに同じベース名で拡張子を.pdfに変更して出力する。]
PDFのページ設定 (任意):
ページサイズ: [例: A4, A3, 入力Excelの印刷設定に合わせるなど。指定がなければデフォルト (例: A4) ]
ページの向き: [例: 縦向き (Portrait), 横向き (Landscape), シートごとに自動判別など。指定がなければデフォルト (例: 縦向き) ]
余白: [例: 上下左右10mmなど。指定がなければデフォルトで良いか。]
5. エラーハンドリング
入力Excelファイルが見つからない場合: エラーメッセージを表示して終了する。
入力ファイルがExcel形式でない場合: エラーメッセージを表示して終了する。
Excelファイルがパスワードで保護されていて開けない場合: エラーメッセージを表示して終了する。
PDF生成中に予期せぬエラーが発生した場合: エラーメッセージと可能な範囲でエラー箇所を示して終了する。
ログ出力: [処理の開始・終了、処理中のシート名、エラー発生時の詳細などをコンソールに出力する。]
6. 技術的な要件・制約
Pythonバージョン: [例: Python 3.8 以上]
使用ライブラリ:
Excel読み込み: pandas と openpyxl (または xlrd) を推奨。
PDF生成:
[Excelの書式再現度に応じて、適切なライブラリをAIに選定・提案してもらうか、特定のライブラリ (例: reportlab, fpdf2, weasyprint, xhtml2pdf, pywin32 (Windows限定でExcelアプリケーション経由でのPDF化)) を指定してください。]
実行環境: [Windows]
7. 提供可能な情報・ファイル (任意)
サンプル入力Excelファイル (書式やレイアウトの複雑さがわかるもの): [もしあれば、ファイル名や形式を記述。必要に応じて別途提供]
期待する出力PDFのイメージ (手動で作成したものでも可): [もしあれば、ファイル名や形式を記述。必要に応じて別途提供]
8. 期待するアウトプット
納品物:
Pythonスクリプトファイル (.py)
requirements.txt (依存ライブラリリスト)
簡単なREADME.md (スクリプトの概要、必要なPythonバージョン、ライブラリのインストール方法、実行方法、入力Excelファイルの前提条件など)
コードの品質:
可読性が高く、適切なコメントが付与されていること。
エラーハンドリングが適切に行われていること。
特定の環境に過度に依存しない、汎用的なコードであること (ただし、「6. 技術的な要件・制約」で指定がある場合はそれに従う)。
9. 改善提案の歓迎
もし、ここまでの要件定義に対して、より効率的な処理方法、より高品質なPDFを生成できるライブラリの選定、あるいは堅牢な設計などがあれば、ぜひ積極的にご提案ください。特に、Excelの書式再現性と処理速度のバランスについて良いアイデアがあれば歓迎します。